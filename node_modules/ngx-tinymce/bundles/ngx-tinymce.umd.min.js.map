{"version":3,"sources":["ng://ngx-tinymce/src/tinymce.options.ts","ng://ngx-tinymce/src/tinymce.script.service.ts","ng://ngx-tinymce/src/tinymce.component.ts","ng://ngx-tinymce/src/tinymce.module.ts"],"names":["TinymceOptions","this","baseURL","fileName","ScriptService","doc","loaded","list","emitter","Subject","prototype","getChangeEmitter","load","path","_this","promises","forEach","script","push","loadScript","Promise","all","then","res","next","resolve","reject","node","createElement","type","src","charset","readyState","onreadystatechange","status","onload","onerror","error","getElementsByTagName","appendChild","Injectable","Inject","args","DOCUMENT","TinymceComponent","defConfig","ss","cd","id","Math","random","toString","substring","_disabled","delay","ready","EventEmitter","Object","defineProperty","value","setDisabled","TemplateRef","_loading","_loadingTpl","_instance","initDelay","setTimeout","init","window","tinymce","Error","_a","config","url","endsWith","substr","length","userOptions","assign","options","selector","setup","editor","on","getContent","onChange","detectChanges","init_instance_callback","setContent","emit","auto_focus","destroy","off","remove","setMode","ngAfterViewInit","subscribe","ngOnChanges","changes","ngOnDestroy","_onReuseInit","writeValue","registerOnChange","fn","registerOnTouched","onTouched","setDisabledState","isDisabled","disabled","Component","template","encapsulation","ViewEncapsulation","None","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","changeDetection","ChangeDetectionStrategy","OnPush","ChangeDetectorRef","Input","Output","NgxTinymceModule","forRoot","ngModule","useValue","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["export class TinymceOptions {\r\n  /** æå®tinymceç®å½è·¯å¾ï¼é»è®¤ï¼`./assets/tinymce/` */\r\n  baseURL ? = './assets/tinymce/';\r\n  /** æå®tinymceæä»¶åï¼é»è®¤ï¼`tinymce.min.js` */\r\n  fileName ? = 'tinymce.min.js';\r\n  /** é»è®¤éç½®é¡¹ï¼å¯¹å¨å± Tinymce ææ */\r\n  config?: any;\r\n  /** å»¶è¿å è½½ï¼åä½ï¼æ¯«ç§ï¼ï¼é»è®¤ï¼`0` */\r\n  delay?: number;\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { Subject } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class ScriptService {\r\n  private loaded = false;\r\n  private list: any = {};\r\n  private emitter: Subject<boolean> = new Subject<boolean>();\r\n\r\n  constructor(@Inject(DOCUMENT) private doc: any) {}\r\n\r\n  getChangeEmitter() {\r\n    return this.emitter;\r\n  }\r\n\r\n  load(path: string) {\r\n    if (this.loaded) {\r\n      return this;\r\n    }\r\n\r\n    this.loaded = true;\r\n\r\n    const promises: Promise<any>[] = [];\r\n\r\n    [path].forEach(script => promises.push(this.loadScript(script)));\r\n\r\n    Promise.all(promises).then(res => {\r\n      this.emitter.next(true);\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  loadScript(path: string): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n      if (this.list[path] === true) {\r\n        resolve(<any>{\r\n          path: path,\r\n          loaded: true,\r\n          status: 'Loaded',\r\n        });\r\n        return;\r\n      }\r\n\r\n      this.list[path] = true;\r\n\r\n      const node = this.doc.createElement('script');\r\n      node.type = 'text/javascript';\r\n      node.src = path;\r\n      node.charset = 'utf-8';\r\n      if ((<any>node).readyState) {\r\n        // IE\r\n        (<any>node).onreadystatechange = () => {\r\n          if (\r\n            (<any>node).readyState === 'loaded' ||\r\n            (<any>node).readyState === 'complete'\r\n          ) {\r\n            (<any>node).onreadystatechange = null;\r\n            resolve(<any>{\r\n              path: path,\r\n              loaded: true,\r\n              status: 'Loaded',\r\n            });\r\n          }\r\n        };\r\n      } else {\r\n        node.onload = () => {\r\n          resolve(<any>{\r\n            path: path,\r\n            loaded: true,\r\n            status: 'Loaded',\r\n          });\r\n        };\r\n      }\r\n      node.onerror = (error: any) =>\r\n        resolve(<any>{\r\n          path: path,\r\n          loaded: false,\r\n          status: 'Loaded',\r\n        });\r\n      this.doc.getElementsByTagName('head')[0].appendChild(node);\r\n    });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  forwardRef,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Input,\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  TemplateRef,\r\n  SimpleChanges,\r\n  ViewEncapsulation,\r\n  Output,\r\n  EventEmitter,\r\n} from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\r\nimport { ScriptService } from './tinymce.script.service';\r\nimport { TinymceOptions } from './tinymce.options';\r\n\r\ndeclare const window: any;\r\ndeclare const tinymce: any;\r\n\r\n@Component({\r\n  selector: 'tinymce',\r\n  templateUrl: './tinymce.component.html',\r\n  styles: [ `tinymce .tinymce-selector { display: none; }` ],\r\n  encapsulation: ViewEncapsulation.None,\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => TinymceComponent),\r\n      multi: true,\r\n    },\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class TinymceComponent implements AfterViewInit, OnChanges, OnDestroy, ControlValueAccessor {\r\n  private _instance: any;\r\n  private value: string;\r\n  load = true;\r\n  id = `_tinymce-${Math.random().toString(36).substring(2)}`;\r\n\r\n  private onChange: (value: string) => void;\r\n  private onTouched: () => void;\r\n\r\n  @Input() config: any;\r\n  @Input() placeholder: string;\r\n  @Input()\r\n  set disabled(value: boolean) {\r\n    this._disabled = value;\r\n    this.setDisabled();\r\n  }\r\n  private _disabled = false;\r\n\r\n  _loading: string;\r\n  _loadingTpl: TemplateRef<any>;\r\n  @Input()\r\n  set loading(value: string | TemplateRef<any>) {\r\n    if (value instanceof TemplateRef) {\r\n      this._loading = null;\r\n      this._loadingTpl = value;\r\n    } else {\r\n      this._loading = value;\r\n    }\r\n  }\r\n  /** å»¶è¿åå§å */\r\n  @Input() delay = 0;\r\n  @Output() ready = new EventEmitter<any>();\r\n\r\n  get instance() {\r\n    return this._instance;\r\n  }\r\n\r\n  constructor(\r\n    private defConfig: TinymceOptions,\r\n    private ss: ScriptService,\r\n    private cd: ChangeDetectorRef,\r\n  ) {}\r\n\r\n  private initDelay() {\r\n    if (this.delay > 0) {\r\n      setTimeout(() => this.init(), this.delay);\r\n    } else {\r\n      this.init();\r\n    }\r\n  }\r\n\r\n  private init() {\r\n    if (!window.tinymce) throw new Error('tinymce jsæä»¶å è½½å¤±è´¥');\r\n\r\n    const { defConfig, config, id } = this;\r\n    if (this._instance) return;\r\n\r\n    if (defConfig.baseURL) {\r\n      let url = '' + defConfig.baseURL;\r\n      if (url.endsWith('/')) url = url.substr(0, url.length - 1);\r\n      tinymce.baseURL = url;\r\n    }\r\n\r\n    const userOptions = Object.assign({}, defConfig.config, config);\r\n\r\n    const options = Object.assign(\r\n      {\r\n        selector: `#` + id,\r\n      },\r\n      defConfig.config,\r\n      config,\r\n      {\r\n        setup: (editor: any) => {\r\n          this._instance = editor;\r\n          editor.on('change keyup', () => {\r\n            this.value = editor.getContent();\r\n            this.onChange(this.value);\r\n            this.cd.detectChanges();\r\n          });\r\n          if (typeof userOptions.setup === 'function') {\r\n            userOptions.setup(editor);\r\n          }\r\n        },\r\n        init_instance_callback: (editor: any) => {\r\n          if (editor && this.value) editor.setContent(this.value);\r\n          this.setDisabled();\r\n          if (typeof userOptions.init_instance_callback === 'function') {\r\n            userOptions.init_instance_callback(editor);\r\n          }\r\n          this.ready.emit(this._instance);\r\n        },\r\n      },\r\n    );\r\n    if (userOptions.auto_focus) {\r\n      options.auto_focus = id;\r\n    }\r\n\r\n    tinymce.init(options);\r\n\r\n    this.load = false;\r\n    this.cd.detectChanges();\r\n  }\r\n\r\n  private destroy() {\r\n    if (!this._instance) {\r\n      return;\r\n    }\r\n    this._instance.off();\r\n    this._instance.remove('#' + this.id);\r\n    this._instance = null;\r\n  }\r\n\r\n  private setDisabled() {\r\n    if (!this._instance) return;\r\n    this._instance.setMode(this._disabled ? 'readonly' : 'design');\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    // å·²ç»å­å¨å¯¹è±¡æ é¡»è¿å¥æå è½½æ¨¡å¼\r\n    if (window.tinymce) {\r\n      this.initDelay();\r\n      return;\r\n    }\r\n\r\n    const { defConfig } = this;\r\n    const baseURL = defConfig && defConfig.baseURL;\r\n    const fileName = defConfig && defConfig.fileName;\r\n    this.ss\r\n      .load((baseURL || './assets/tinymce/') + (fileName || 'tinymce.min.js'))\r\n      .getChangeEmitter()\r\n      .subscribe(() => this.initDelay());\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (this._instance && changes.config) {\r\n      this.destroy();\r\n      this.initDelay();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy();\r\n  }\r\n\r\n  // reuse-tab: http://ng-alain.com/components/reuse-tab#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\r\n  _onReuseInit() {\r\n    this.destroy();\r\n    this.initDelay();\r\n  }\r\n\r\n  writeValue(value: string): void {\r\n    // value should be NOT NULL\r\n    this.value = value || '';\r\n    if (this._instance) {\r\n      this._instance.setContent(this.value);\r\n    }\r\n  }\r\n\r\n  registerOnChange(fn: (_: any) => {}): void {\r\n    this.onChange = fn;\r\n  }\r\n  registerOnTouched(fn: () => {}): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n    this.setDisabled();\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { TinymceOptions } from './tinymce.options';\r\nimport { TinymceComponent } from './tinymce.component';\r\nimport { ScriptService } from './tinymce.script.service';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [TinymceComponent],\r\n  exports: [TinymceComponent],\r\n})\r\nexport class NgxTinymceModule {\r\n  static forRoot(options: TinymceOptions): ModuleWithProviders {\r\n    return {\r\n      ngModule: NgxTinymceModule,\r\n      providers: [\r\n        ScriptService,\r\n        { provide: TinymceOptions, useValue: options },\r\n      ],\r\n    };\r\n  }\r\n}\r\n"]}