import { Component, forwardRef, Input, ChangeDetectionStrategy, ChangeDetectorRef, TemplateRef, ViewEncapsulation, Output, EventEmitter, } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { ScriptService } from './tinymce.script.service';
import { TinymceOptions } from './tinymce.options';
export class TinymceComponent {
    constructor(defConfig, ss, cd) {
        this.defConfig = defConfig;
        this.ss = ss;
        this.cd = cd;
        this.load = true;
        this.id = `_tinymce-${Math.random().toString(36).substring(2)}`;
        this._disabled = false;
        /** 延迟初始化 */
        this.delay = 0;
        this.ready = new EventEmitter();
    }
    set disabled(value) {
        this._disabled = value;
        this.setDisabled();
    }
    set loading(value) {
        if (value instanceof TemplateRef) {
            this._loading = null;
            this._loadingTpl = value;
        }
        else {
            this._loading = value;
        }
    }
    get instance() {
        return this._instance;
    }
    initDelay() {
        if (this.delay > 0) {
            setTimeout(() => this.init(), this.delay);
        }
        else {
            this.init();
        }
    }
    init() {
        if (!window.tinymce)
            throw new Error('tinymce js文件加载失败');
        const { defConfig, config, id } = this;
        if (this._instance)
            return;
        if (defConfig.baseURL) {
            let url = '' + defConfig.baseURL;
            if (url.endsWith('/'))
                url = url.substr(0, url.length - 1);
            tinymce.baseURL = url;
        }
        const userOptions = Object.assign({}, defConfig.config, config);
        const options = Object.assign({
            selector: `#` + id,
        }, defConfig.config, config, {
            setup: (editor) => {
                this._instance = editor;
                editor.on('change keyup', () => {
                    this.value = editor.getContent();
                    this.onChange(this.value);
                    this.cd.detectChanges();
                });
                if (typeof userOptions.setup === 'function') {
                    userOptions.setup(editor);
                }
            },
            init_instance_callback: (editor) => {
                if (editor && this.value)
                    editor.setContent(this.value);
                this.setDisabled();
                if (typeof userOptions.init_instance_callback === 'function') {
                    userOptions.init_instance_callback(editor);
                }
                this.ready.emit(this._instance);
            },
        });
        if (userOptions.auto_focus) {
            options.auto_focus = id;
        }
        tinymce.init(options);
        this.load = false;
        this.cd.detectChanges();
    }
    destroy() {
        if (!this._instance) {
            return;
        }
        this._instance.off();
        this._instance.remove('#' + this.id);
        this._instance = null;
    }
    setDisabled() {
        if (!this._instance)
            return;
        this._instance.setMode(this._disabled ? 'readonly' : 'design');
    }
    ngAfterViewInit() {
        // 已经存在对象无须进入懒加载模式
        if (window.tinymce) {
            this.initDelay();
            return;
        }
        const { defConfig } = this;
        const baseURL = defConfig && defConfig.baseURL;
        const fileName = defConfig && defConfig.fileName;
        this.ss
            .load((baseURL || './assets/tinymce/') + (fileName || 'tinymce.min.js'))
            .getChangeEmitter()
            .subscribe(() => this.initDelay());
    }
    ngOnChanges(changes) {
        if (this._instance && changes.config) {
            this.destroy();
            this.initDelay();
        }
    }
    ngOnDestroy() {
        this.destroy();
    }
    // reuse-tab: http://ng-alain.com/components/reuse-tab#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F
    _onReuseInit() {
        this.destroy();
        this.initDelay();
    }
    writeValue(value) {
        // value should be NOT NULL
        this.value = value || '';
        if (this._instance) {
            this._instance.setContent(this.value);
        }
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.setDisabled();
    }
}
TinymceComponent.decorators = [
    { type: Component, args: [{
                selector: 'tinymce',
                template: "<textarea id=\"{{id}}\" [placeholder]=\"placeholder\" class=\"tinymce-selector\"></textarea>\n<div class=\"loading\" *ngIf=\"load\">\n  <ng-container *ngIf=\"_loading; else _loadingTpl\">{{_loading}}</ng-container>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => TinymceComponent),
                        multi: true,
                    },
                ],
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [`tinymce .tinymce-selector { display: none; }`]
            }] }
];
/** @nocollapse */
TinymceComponent.ctorParameters = () => [
    { type: TinymceOptions },
    { type: ScriptService },
    { type: ChangeDetectorRef }
];
TinymceComponent.propDecorators = {
    config: [{ type: Input }],
    placeholder: [{ type: Input }],
    disabled: [{ type: Input }],
    loading: [{ type: Input }],
    delay: [{ type: Input }],
    ready: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,