(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('rxjs'), require('@angular/forms')) :
    typeof define === 'function' && define.amd ? define('ngx-ueditor', ['exports', '@angular/core', '@angular/common', 'rxjs', '@angular/forms'], factory) :
    (factory((global['ngx-ueditor'] = {}),global.ng.core,global.ng.common,global.rxjs,global.ng.forms));
}(this, (function (exports,core,common,rxjs,forms) { 'use strict';

    var ScriptService = /** @class */ (function () {
        function ScriptService(doc) {
            this.doc = doc;
            this.loaded = false;
            this.list = {};
            this.emitter = new rxjs.Subject();
        }
        ScriptService.prototype.getChangeEmitter = function () {
            return this.emitter;
        };
        ScriptService.prototype.load = function (path) {
            var _this = this;
            if (this.loaded)
                return this;
            this.loaded = true;
            var promises = [];
            path.forEach(function (script) { return promises.push(_this.loadScript(script)); });
            Promise.all(promises).then(function () { return _this.emitter.next(true); });
            return this;
        };
        ScriptService.prototype.loadScript = function (path) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                if (_this.list[path] === true) {
                    resolve({
                        path: path,
                        loaded: true,
                        status: 'Loaded',
                    });
                    return;
                }
                _this.list[path] = true;
                var node = _this.doc.createElement('script');
                node.type = 'text/javascript';
                node.src = path;
                node.charset = 'utf-8';
                if (node.readyState) {
                    // IE
                    node.onreadystatechange = function () {
                        if (node.readyState === 'loaded' || node.readyState === 'complete') {
                            node.onreadystatechange = null;
                            resolve({
                                path: path,
                                loaded: true,
                                status: 'Loaded',
                            });
                        }
                    };
                }
                else {
                    node.onload = function () {
                        resolve({
                            path: path,
                            loaded: true,
                            status: 'Loaded',
                        });
                    };
                }
                node.onerror = function () {
                    return resolve({
                        path: path,
                        loaded: false,
                        status: 'Loaded',
                    });
                };
                _this.doc.getElementsByTagName('head')[0].appendChild(node);
            });
        };
        ScriptService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ScriptService.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] }
            ];
        };
        return ScriptService;
    }());

    var UEditorConfig = /** @class */ (function () {
        function UEditorConfig() {
        }
        return UEditorConfig;
    }());

    var _hook_finished = false;
    var UEditorComponent = /** @class */ (function () {
        function UEditorComponent(ss, cog, cd, zone) {
            this.ss = ss;
            this.cog = cog;
            this.cd = cd;
            this.zone = zone;
            this.inited = false;
            this.events = {};
            this.loading = true;
            this.id = "_ueditor-" + Math.random()
                .toString(36)
                .substring(2);
            this.loadingTip = '加载中...';
            this._disabled = false;
            /** 延迟初始化 */
            this.delay = 50;
            this.onPreReady = new core.EventEmitter();
            this.onReady = new core.EventEmitter();
            this.onDestroy = new core.EventEmitter();
        }
        Object.defineProperty(UEditorComponent.prototype, "disabled", {
            set: function (value) {
                this._disabled = value;
                this.setDisabled();
            },
            enumerable: true,
            configurable: true
        });
        UEditorComponent.prototype.ngOnInit = function () {
            this.inited = true;
        };
        UEditorComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            // 已经存在对象无须进入懒加载模式
            if (window.UE) {
                this.initDelay();
                return;
            }
            this.ss
                .load(this.cog.js)
                .getChangeEmitter()
                .subscribe(function (res) {
                _this.initDelay();
            });
        };
        UEditorComponent.prototype.ngOnChanges = function (changes) {
            if (this.inited && changes.config) {
                this.destroy();
                this.initDelay();
            }
        };
        UEditorComponent.prototype.initDelay = function () {
            var _this = this;
            setTimeout(function () { return _this.init(); }, this.delay);
        };
        UEditorComponent.prototype.init = function () {
            var _this = this;
            if (!window.UE)
                throw new Error('uedito js文件加载失败');
            if (this.instance)
                return;
            // registrer hook
            if (this.cog.hook && !_hook_finished) {
                _hook_finished = true;
                this.cog.hook(UE);
            }
            this.onPreReady.emit(this);
            var opt = Object.assign({}, this.cog.options, this.config);
            this.zone.runOutsideAngular(function () {
                var ueditor = UE.getEditor(_this.id, opt);
                ueditor.ready(function () {
                    _this.instance = ueditor;
                    if (_this.value)
                        _this.instance.setContent(_this.value);
                    _this.onReady.emit(_this);
                });
                ueditor.addListener('contentChange', function () {
                    _this.value = ueditor.getContent();
                    _this.zone.run(function () { return _this.onChange(_this.value); });
                });
            });
            this.loading = false;
            this.cd.detectChanges();
        };
        UEditorComponent.prototype.destroy = function () {
            var _this = this;
            if (this.instance) {
                this.zone.runOutsideAngular(function () {
                    Object.keys(_this.events).forEach(function (name) {
                        return _this.instance.removeListener(name, _this.events[name]);
                    });
                    _this.instance.removeListener('ready');
                    _this.instance.removeListener('contentChange');
                    _this.instance.destroy();
                    _this.instance = null;
                });
            }
            this.onDestroy.emit();
        };
        UEditorComponent.prototype.setDisabled = function () {
            if (!this.instance)
                return;
            if (this._disabled) {
                this.instance.setDisabled();
            }
            else {
                this.instance.setEnabled();
            }
        };
        Object.defineProperty(UEditorComponent.prototype, "Instance", {
            /**
             * 获取UE实例
             *
             * @readonly
             */
            get: function () {
                return this.instance;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 设置编辑器语言
         */
        UEditorComponent.prototype.setLanguage = function (lang) {
            var _this = this;
            this.ss
                .loadScript(this.cog.options.UEDITOR_HOME_URL + "/lang/" + lang + "/" + lang + ".js")
                .then(function (res) {
                _this.destroy();
                // 清空语言
                if (!UE._bak_I18N) {
                    UE._bak_I18N = UE.I18N;
                }
                UE.I18N = {};
                UE.I18N[lang] = UE._bak_I18N[lang];
                _this.initDelay();
            });
        };
        /**
         * 添加编辑器事件
         */
        UEditorComponent.prototype.addListener = function (eventName, fn) {
            if (this.events[eventName])
                return;
            this.events[eventName] = fn;
            this.instance.addListener(eventName, fn);
        };
        /**
         * 移除编辑器事件
         */
        UEditorComponent.prototype.removeListener = function (eventName) {
            if (!this.events[eventName])
                return;
            this.instance.removeListener(eventName, this.events[eventName]);
            delete this.events[eventName];
        };
        UEditorComponent.prototype.ngOnDestroy = function () {
            this.destroy();
        };
        // reuse-tab: http://ng-alain.com/components/reuse-tab#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F
        UEditorComponent.prototype._onReuseInit = function () {
            this.destroy();
            this.initDelay();
        };
        UEditorComponent.prototype.writeValue = function (value) {
            this.value = value;
            if (this.instance) {
                this.instance.setContent(this.value);
            }
        };
        UEditorComponent.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        UEditorComponent.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        UEditorComponent.prototype.setDisabledState = function (isDisabled) {
            this.disabled = isDisabled;
            this.setDisabled();
        };
        UEditorComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ueditor',
                        template: "\n  <textarea id=\"{{id}}\" class=\"ueditor-textarea\"></textarea>\n  <div *ngIf=\"loading\" class=\"loading\" [innerHTML]=\"loadingTip\"></div>\n  ",
                        preserveWhitespaces: false,
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef(function () { return UEditorComponent; }),
                                multi: true,
                            },
                        ],
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        styles: ["\n      :host {\n        line-height: initial;\n      }\n      :host .ueditor-textarea {\n        display: none;\n      }\n    "]
                    }] }
        ];
        /** @nocollapse */
        UEditorComponent.ctorParameters = function () {
            return [
                { type: ScriptService },
                { type: UEditorConfig },
                { type: core.ChangeDetectorRef },
                { type: core.NgZone }
            ];
        };
        UEditorComponent.propDecorators = {
            config: [{ type: core.Input }],
            loadingTip: [{ type: core.Input }],
            disabled: [{ type: core.Input }],
            delay: [{ type: core.Input }],
            onPreReady: [{ type: core.Output }],
            onReady: [{ type: core.Output }],
            onDestroy: [{ type: core.Output }]
        };
        return UEditorComponent;
    }());

    var UEditorModule = /** @class */ (function () {
        function UEditorModule() {
        }
        UEditorModule.forRoot = function (config) {
            return {
                ngModule: UEditorModule,
                providers: [{ provide: UEditorConfig, useValue: config }],
            };
        };
        UEditorModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule],
                        providers: [ScriptService],
                        declarations: [UEditorComponent],
                        exports: [UEditorComponent],
                    },] }
        ];
        return UEditorModule;
    }());

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ɵa = ScriptService;
    exports.UEditorComponent = UEditorComponent;
    exports.UEditorConfig = UEditorConfig;
    exports.UEditorModule = UEditorModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,