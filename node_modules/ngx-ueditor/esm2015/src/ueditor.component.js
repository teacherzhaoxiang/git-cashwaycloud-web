import { Component, Input, forwardRef, EventEmitter, Output, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { ScriptService } from './script.service';
import { UEditorConfig } from './ueditor.config';
let _hook_finished = false;
export class UEditorComponent {
    constructor(ss, cog, cd, zone) {
        this.ss = ss;
        this.cog = cog;
        this.cd = cd;
        this.zone = zone;
        this.inited = false;
        this.events = {};
        this.loading = true;
        this.id = `_ueditor-${Math.random()
            .toString(36)
            .substring(2)}`;
        this.loadingTip = '加载中...';
        this._disabled = false;
        /** 延迟初始化 */
        this.delay = 50;
        this.onPreReady = new EventEmitter();
        this.onReady = new EventEmitter();
        this.onDestroy = new EventEmitter();
    }
    set disabled(value) {
        this._disabled = value;
        this.setDisabled();
    }
    ngOnInit() {
        this.inited = true;
    }
    ngAfterViewInit() {
        // 已经存在对象无须进入懒加载模式
        if (window.UE) {
            this.initDelay();
            return;
        }
        this.ss
            .load(this.cog.js)
            .getChangeEmitter()
            .subscribe(res => {
            this.initDelay();
        });
    }
    ngOnChanges(changes) {
        if (this.inited && changes.config) {
            this.destroy();
            this.initDelay();
        }
    }
    initDelay() {
        setTimeout(() => this.init(), this.delay);
    }
    init() {
        if (!window.UE)
            throw new Error('uedito js文件加载失败');
        if (this.instance)
            return;
        // registrer hook
        if (this.cog.hook && !_hook_finished) {
            _hook_finished = true;
            this.cog.hook(UE);
        }
        this.onPreReady.emit(this);
        const opt = Object.assign({}, this.cog.options, this.config);
        this.zone.runOutsideAngular(() => {
            const ueditor = UE.getEditor(this.id, opt);
            ueditor.ready(() => {
                this.instance = ueditor;
                if (this.value)
                    this.instance.setContent(this.value);
                this.onReady.emit(this);
            });
            ueditor.addListener('contentChange', () => {
                this.value = ueditor.getContent();
                this.zone.run(() => this.onChange(this.value));
            });
        });
        this.loading = false;
        this.cd.detectChanges();
    }
    destroy() {
        if (this.instance) {
            this.zone.runOutsideAngular(() => {
                Object.keys(this.events).forEach(name => this.instance.removeListener(name, this.events[name]));
                this.instance.removeListener('ready');
                this.instance.removeListener('contentChange');
                this.instance.destroy();
                this.instance = null;
            });
        }
        this.onDestroy.emit();
    }
    setDisabled() {
        if (!this.instance)
            return;
        if (this._disabled) {
            this.instance.setDisabled();
        }
        else {
            this.instance.setEnabled();
        }
    }
    /**
     * 获取UE实例
     *
     * @readonly
     */
    get Instance() {
        return this.instance;
    }
    /**
     * 设置编辑器语言
     */
    setLanguage(lang) {
        this.ss
            .loadScript(`${this.cog.options.UEDITOR_HOME_URL}/lang/${lang}/${lang}.js`)
            .then(res => {
            this.destroy();
            // 清空语言
            if (!UE._bak_I18N) {
                UE._bak_I18N = UE.I18N;
            }
            UE.I18N = {};
            UE.I18N[lang] = UE._bak_I18N[lang];
            this.initDelay();
        });
    }
    /**
     * 添加编辑器事件
     */
    addListener(eventName, fn) {
        if (this.events[eventName])
            return;
        this.events[eventName] = fn;
        this.instance.addListener(eventName, fn);
    }
    /**
     * 移除编辑器事件
     */
    removeListener(eventName) {
        if (!this.events[eventName])
            return;
        this.instance.removeListener(eventName, this.events[eventName]);
        delete this.events[eventName];
    }
    ngOnDestroy() {
        this.destroy();
    }
    // reuse-tab: http://ng-alain.com/components/reuse-tab#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F
    _onReuseInit() {
        this.destroy();
        this.initDelay();
    }
    writeValue(value) {
        this.value = value;
        if (this.instance) {
            this.instance.setContent(this.value);
        }
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.setDisabled();
    }
}
UEditorComponent.decorators = [
    { type: Component, args: [{
                selector: 'ueditor',
                template: `
  <textarea id="{{id}}" class="ueditor-textarea"></textarea>
  <div *ngIf="loading" class="loading" [innerHTML]="loadingTip"></div>
  `,
                preserveWhitespaces: false,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => UEditorComponent),
                        multi: true,
                    },
                ],
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [`
      :host {
        line-height: initial;
      }
      :host .ueditor-textarea {
        display: none;
      }
    `]
            }] }
];
/** @nocollapse */
UEditorComponent.ctorParameters = () => [
    { type: ScriptService },
    { type: UEditorConfig },
    { type: ChangeDetectorRef },
    { type: NgZone }
];
UEditorComponent.propDecorators = {
    config: [{ type: Input }],
    loadingTip: [{ type: Input }],
    disabled: [{ type: Input }],
    delay: [{ type: Input }],
    onPreReady: [{ type: Output }],
    onReady: [{ type: Output }],
    onDestroy: [{ type: Output }]
};

//# sourceMappingURL=data:application/json;base64,