import { Injectable, Inject, Component, Input, forwardRef, EventEmitter, Output, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, NgModule } from '@angular/core';
import { DOCUMENT, CommonModule } from '@angular/common';
import { Subject } from 'rxjs';
import { NG_VALUE_ACCESSOR } from '@angular/forms';

class ScriptService {
    constructor(doc) {
        this.doc = doc;
        this.loaded = false;
        this.list = {};
        this.emitter = new Subject();
    }
    getChangeEmitter() {
        return this.emitter;
    }
    load(path) {
        if (this.loaded)
            return this;
        this.loaded = true;
        const promises = [];
        path.forEach(script => promises.push(this.loadScript(script)));
        Promise.all(promises).then(() => this.emitter.next(true));
        return this;
    }
    loadScript(path) {
        return new Promise((resolve, reject) => {
            if (this.list[path] === true) {
                resolve({
                    path: path,
                    loaded: true,
                    status: 'Loaded',
                });
                return;
            }
            this.list[path] = true;
            const node = this.doc.createElement('script');
            node.type = 'text/javascript';
            node.src = path;
            node.charset = 'utf-8';
            if (node.readyState) {
                // IE
                node.onreadystatechange = () => {
                    if (node.readyState === 'loaded' || node.readyState === 'complete') {
                        node.onreadystatechange = null;
                        resolve({
                            path: path,
                            loaded: true,
                            status: 'Loaded',
                        });
                    }
                };
            }
            else {
                node.onload = () => {
                    resolve({
                        path: path,
                        loaded: true,
                        status: 'Loaded',
                    });
                };
            }
            node.onerror = () => resolve({
                path: path,
                loaded: false,
                status: 'Loaded',
            });
            this.doc.getElementsByTagName('head')[0].appendChild(node);
        });
    }
}
ScriptService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ScriptService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];

class UEditorConfig {
}

let _hook_finished = false;
class UEditorComponent {
    constructor(ss, cog, cd, zone) {
        this.ss = ss;
        this.cog = cog;
        this.cd = cd;
        this.zone = zone;
        this.inited = false;
        this.events = {};
        this.loading = true;
        this.id = `_ueditor-${Math.random()
            .toString(36)
            .substring(2)}`;
        this.loadingTip = '加载中...';
        this._disabled = false;
        /** 延迟初始化 */
        this.delay = 50;
        this.onPreReady = new EventEmitter();
        this.onReady = new EventEmitter();
        this.onDestroy = new EventEmitter();
    }
    set disabled(value) {
        this._disabled = value;
        this.setDisabled();
    }
    ngOnInit() {
        this.inited = true;
    }
    ngAfterViewInit() {
        // 已经存在对象无须进入懒加载模式
        if (window.UE) {
            this.initDelay();
            return;
        }
        this.ss
            .load(this.cog.js)
            .getChangeEmitter()
            .subscribe(res => {
            this.initDelay();
        });
    }
    ngOnChanges(changes) {
        if (this.inited && changes.config) {
            this.destroy();
            this.initDelay();
        }
    }
    initDelay() {
        setTimeout(() => this.init(), this.delay);
    }
    init() {
        if (!window.UE)
            throw new Error('uedito js文件加载失败');
        if (this.instance)
            return;
        // registrer hook
        if (this.cog.hook && !_hook_finished) {
            _hook_finished = true;
            this.cog.hook(UE);
        }
        this.onPreReady.emit(this);
        const opt = Object.assign({}, this.cog.options, this.config);
        this.zone.runOutsideAngular(() => {
            const ueditor = UE.getEditor(this.id, opt);
            ueditor.ready(() => {
                this.instance = ueditor;
                if (this.value)
                    this.instance.setContent(this.value);
                this.onReady.emit(this);
            });
            ueditor.addListener('contentChange', () => {
                this.value = ueditor.getContent();
                this.zone.run(() => this.onChange(this.value));
            });
        });
        this.loading = false;
        this.cd.detectChanges();
    }
    destroy() {
        if (this.instance) {
            this.zone.runOutsideAngular(() => {
                Object.keys(this.events).forEach(name => this.instance.removeListener(name, this.events[name]));
                this.instance.removeListener('ready');
                this.instance.removeListener('contentChange');
                this.instance.destroy();
                this.instance = null;
            });
        }
        this.onDestroy.emit();
    }
    setDisabled() {
        if (!this.instance)
            return;
        if (this._disabled) {
            this.instance.setDisabled();
        }
        else {
            this.instance.setEnabled();
        }
    }
    /**
     * 获取UE实例
     *
     * @readonly
     */
    get Instance() {
        return this.instance;
    }
    /**
     * 设置编辑器语言
     */
    setLanguage(lang) {
        this.ss
            .loadScript(`${this.cog.options.UEDITOR_HOME_URL}/lang/${lang}/${lang}.js`)
            .then(res => {
            this.destroy();
            // 清空语言
            if (!UE._bak_I18N) {
                UE._bak_I18N = UE.I18N;
            }
            UE.I18N = {};
            UE.I18N[lang] = UE._bak_I18N[lang];
            this.initDelay();
        });
    }
    /**
     * 添加编辑器事件
     */
    addListener(eventName, fn) {
        if (this.events[eventName])
            return;
        this.events[eventName] = fn;
        this.instance.addListener(eventName, fn);
    }
    /**
     * 移除编辑器事件
     */
    removeListener(eventName) {
        if (!this.events[eventName])
            return;
        this.instance.removeListener(eventName, this.events[eventName]);
        delete this.events[eventName];
    }
    ngOnDestroy() {
        this.destroy();
    }
    // reuse-tab: http://ng-alain.com/components/reuse-tab#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F
    _onReuseInit() {
        this.destroy();
        this.initDelay();
    }
    writeValue(value) {
        this.value = value;
        if (this.instance) {
            this.instance.setContent(this.value);
        }
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.setDisabled();
    }
}
UEditorComponent.decorators = [
    { type: Component, args: [{
                selector: 'ueditor',
                template: `
  <textarea id="{{id}}" class="ueditor-textarea"></textarea>
  <div *ngIf="loading" class="loading" [innerHTML]="loadingTip"></div>
  `,
                preserveWhitespaces: false,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => UEditorComponent),
                        multi: true,
                    },
                ],
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [`
      :host {
        line-height: initial;
      }
      :host .ueditor-textarea {
        display: none;
      }
    `]
            }] }
];
/** @nocollapse */
UEditorComponent.ctorParameters = () => [
    { type: ScriptService },
    { type: UEditorConfig },
    { type: ChangeDetectorRef },
    { type: NgZone }
];
UEditorComponent.propDecorators = {
    config: [{ type: Input }],
    loadingTip: [{ type: Input }],
    disabled: [{ type: Input }],
    delay: [{ type: Input }],
    onPreReady: [{ type: Output }],
    onReady: [{ type: Output }],
    onDestroy: [{ type: Output }]
};

class UEditorModule {
    static forRoot(config) {
        return {
            ngModule: UEditorModule,
            providers: [{ provide: UEditorConfig, useValue: config }],
        };
    }
}
UEditorModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                providers: [ScriptService],
                declarations: [UEditorComponent],
                exports: [UEditorComponent],
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { ScriptService as ɵa, UEditorComponent, UEditorConfig, UEditorModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXVlZGl0b3IuanMubWFwIiwic291cmNlcyI6WyJuZzovL25neC11ZWRpdG9yL3NyYy9zY3JpcHQuc2VydmljZS50cyIsIm5nOi8vbmd4LXVlZGl0b3Ivc3JjL3VlZGl0b3IuY29uZmlnLnRzIiwibmc6Ly9uZ3gtdWVkaXRvci9zcmMvdWVkaXRvci5jb21wb25lbnQudHMiLCJuZzovL25neC11ZWRpdG9yL3NyYy91ZWRpdG9yLm1vZHVsZS50cyIsIm5nOi8vbmd4LXVlZGl0b3Ivbmd4LXVlZGl0b3IudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgU2NyaXB0U2VydmljZSB7XHJcbiAgcHJpdmF0ZSBsb2FkZWQgPSBmYWxzZTtcclxuICBwcml2YXRlIGxpc3Q6IGFueSA9IHt9O1xyXG4gIHByaXZhdGUgZW1pdHRlcjogU3ViamVjdDxib29sZWFuPiA9IG5ldyBTdWJqZWN0PGJvb2xlYW4+KCk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKEBJbmplY3QoRE9DVU1FTlQpIHByaXZhdGUgZG9jOiBhbnkpIHt9XHJcblxyXG4gIGdldENoYW5nZUVtaXR0ZXIoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5lbWl0dGVyO1xyXG4gIH1cclxuXHJcbiAgbG9hZChwYXRoOiBzdHJpbmdbXSkge1xyXG4gICAgaWYgKHRoaXMubG9hZGVkKSByZXR1cm4gdGhpcztcclxuXHJcbiAgICB0aGlzLmxvYWRlZCA9IHRydWU7XHJcblxyXG4gICAgY29uc3QgcHJvbWlzZXM6IFByb21pc2U8YW55PltdID0gW107XHJcblxyXG4gICAgcGF0aC5mb3JFYWNoKHNjcmlwdCA9PiBwcm9taXNlcy5wdXNoKHRoaXMubG9hZFNjcmlwdChzY3JpcHQpKSk7XHJcblxyXG4gICAgUHJvbWlzZS5hbGwocHJvbWlzZXMpLnRoZW4oKCkgPT4gdGhpcy5lbWl0dGVyLm5leHQodHJ1ZSkpO1xyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgbG9hZFNjcmlwdChwYXRoOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgaWYgKHRoaXMubGlzdFtwYXRoXSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgIHJlc29sdmUoPGFueT57XHJcbiAgICAgICAgICBwYXRoOiBwYXRoLFxyXG4gICAgICAgICAgbG9hZGVkOiB0cnVlLFxyXG4gICAgICAgICAgc3RhdHVzOiAnTG9hZGVkJyxcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMubGlzdFtwYXRoXSA9IHRydWU7XHJcblxyXG4gICAgICBjb25zdCBub2RlID0gdGhpcy5kb2MuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XHJcbiAgICAgIG5vZGUudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnO1xyXG4gICAgICBub2RlLnNyYyA9IHBhdGg7XHJcbiAgICAgIG5vZGUuY2hhcnNldCA9ICd1dGYtOCc7XHJcbiAgICAgIGlmIChub2RlLnJlYWR5U3RhdGUpIHtcclxuICAgICAgICAvLyBJRVxyXG4gICAgICAgIG5vZGUub25yZWFkeXN0YXRlY2hhbmdlID0gKCkgPT4ge1xyXG4gICAgICAgICAgaWYgKG5vZGUucmVhZHlTdGF0ZSA9PT0gJ2xvYWRlZCcgfHwgbm9kZS5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XHJcbiAgICAgICAgICAgIG5vZGUub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcclxuICAgICAgICAgICAgcmVzb2x2ZSg8YW55PntcclxuICAgICAgICAgICAgICBwYXRoOiBwYXRoLFxyXG4gICAgICAgICAgICAgIGxvYWRlZDogdHJ1ZSxcclxuICAgICAgICAgICAgICBzdGF0dXM6ICdMb2FkZWQnLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIG5vZGUub25sb2FkID0gKCkgPT4ge1xyXG4gICAgICAgICAgcmVzb2x2ZSg8YW55PntcclxuICAgICAgICAgICAgcGF0aDogcGF0aCxcclxuICAgICAgICAgICAgbG9hZGVkOiB0cnVlLFxyXG4gICAgICAgICAgICBzdGF0dXM6ICdMb2FkZWQnLFxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG4gICAgICBub2RlLm9uZXJyb3IgPSAoKSA9PlxyXG4gICAgICAgIHJlc29sdmUoPGFueT57XHJcbiAgICAgICAgICBwYXRoOiBwYXRoLFxyXG4gICAgICAgICAgbG9hZGVkOiBmYWxzZSxcclxuICAgICAgICAgIHN0YXR1czogJ0xvYWRlZCcsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIHRoaXMuZG9jLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0uYXBwZW5kQ2hpbGQobm9kZSk7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGludGVyZmFjZSBVRWRpdG9yT3B0aW9ucyB7XHJcbiAgW2tleTogc3RyaW5nXTogYW55O1xyXG4gIC8qKiDDpcK9wpPDpMK9wqDDpMK9wr/Dp8KUwqggYGNkbmAgw6bCl8K2w6/CvMKMw6XCscKew6bCgMKnw6XCv8KFw6XCocKrw6/CvMKMw6fCm8K4w6XCvcKTw6TCusKOw6bClcK0w6TCuMKqIFVlZGl0b3Igw6bCicKAw6nCnMKAw6jCpsKBw6jCr8Ktw6jCqMKAw6PCgMKBw6TCuMK7w6nCosKYw6PCgMKBw6XCr8K5w6jCr8Kdw6bCocKGw6fCrcKJw6bCoMK5w6jCt8Kvw6XCvsKEICovXHJcbiAgVUVESVRPUl9IT01FX1VSTDogc3RyaW5nO1xyXG4gIC8qKiDDpsKcwo3DpcKKwqHDpcKZwqjDp8K7wp/DpMK4woDDqMKvwrfDpsKxwoLDpsKOwqXDpcKPwqPDqMK3wq/DpcK+woQgKi9cclxuICBzZXJ2ZXJVcmw/OiBzdHJpbmc7XHJcbiAgLyoqIMOlwrfCpcOlwoXCt8OmwqDCj8OkwrjCisOnwprChMOmwonCgMOmwpzCicOnwprChMOlworCn8OowoPCvcOmwozCicOpwpLCrsOlwpLCjMOkwrjCi8OmwovCicOmwqHChsOvwrzCjMOlwo/Cr8OkwrvCpcOlwpzCqG5ld8OnwrzClsOowr7CkcOlwpnCqMOnwprChMOlwq7CnsOkwr7Ci8OmwpfCtsOpwoDCicOmwovCqcOowofCqsOlwrfCscOpwpzCgMOowqbCgcOnwprChMOkwrvCjsOmwpbCsMOlwq7CmsOkwrnCiSAqL1xyXG4gIHRvb2xiYXJzPzogc3RyaW5nW11bXTtcclxuICAvKiogw6fCvMKWw6jCvsKRw6XCmcKow6XCscKCw6fCusKnw6fCmsKEw6XCn8K6w6bClcKwLMOpwrvCmMOowq7CpCBgOTAwYCAqL1xyXG4gIHpJbmRleD86IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFVFZGl0b3JDb25maWcge1xyXG4gIC8qKlxyXG4gICAqIFVlZGl0b3IgW8OlwonCjcOnwqvCr8OpwoXCjcOnwr3CrsOpwqHCuV0oaHR0cDovL2ZleC5iYWlkdS5jb20vdWVkaXRvci8jc3RhcnQtY29uZmlnKVxyXG4gICAqL1xyXG4gIG9wdGlvbnM6IFVFZGl0b3JPcHRpb25zO1xyXG5cclxuICAvKipcclxuICAgKiDDpsKMwofDpcKuwpp1ZWRpdG9yLmpzw6XCksKMY29uZmlnLmpzw6jCt8Kvw6XCvsKEw6/CvMKMw6jCv8KZw6bCmMKvw6XCkMKvw6XCisKoIFVlZGl0b3Igw6XCv8KFw6XCpMKHXHJcbiAgICogLSAqKsOlworCocOlwr/ChSoqw6bCjMKHw6XCrsKaIGBvcHRpb25zLlVFRElUT1JfSE9NRV9VUkxgw6/CvMKIw6jCmcK9w6fChMK2w6nCu8KYw6jCrsKkw6TCvMKaw6bCoMK5w6bCjcKuIGBjb25maWcuanNgIMOowrfCr8Olwr7ChMOowo7Ct8Olwo/ClsOvwrzCjMOkwr3ChsOmwp/CkMOkwrrCm8Onwo7Cr8OlwqLCg8OkwrjCi8OmwpvCtMOmwpzCicOkwr/CncOowq/CgcOvwrzCiVxyXG4gICAqL1xyXG4gIGpzOiBzdHJpbmdbXTtcclxuXHJcbiAgLyoqXHJcbiAgICogSG9va1xyXG4gICAqIC0gw6XCnMKoIFVlZGl0b3Igw6XCr8K5w6jCscKhw6XCisKgw6jCvcK9w6XCrsKMw6bCiMKQw6XCkMKOw6bCicKnw6jCocKMXHJcbiAgICogLSDDpcKPwqrDpsKJwqfDqMKhwozDpMK4woDDpsKswqFcclxuICAgKi9cclxuICBob29rPzogKHVlOiBhbnkpID0+IHZvaWQ7XHJcbn1cclxuIiwiaW1wb3J0IHtcclxuICBDb21wb25lbnQsXHJcbiAgSW5wdXQsXHJcbiAgZm9yd2FyZFJlZixcclxuICBPbkRlc3Ryb3ksXHJcbiAgRXZlbnRFbWl0dGVyLFxyXG4gIE91dHB1dCxcclxuICBPbkluaXQsXHJcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXHJcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXHJcbiAgQWZ0ZXJWaWV3SW5pdCxcclxuICBPbkNoYW5nZXMsXHJcbiAgU2ltcGxlQ2hhbmdlcyxcclxuICBOZ1pvbmUsXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE5HX1ZBTFVFX0FDQ0VTU09SLCBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuXHJcbmltcG9ydCB7IFNjcmlwdFNlcnZpY2UgfSBmcm9tICcuL3NjcmlwdC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgVUVkaXRvckNvbmZpZyB9IGZyb20gJy4vdWVkaXRvci5jb25maWcnO1xyXG5cclxuZGVjbGFyZSBjb25zdCB3aW5kb3c6IGFueTtcclxuZGVjbGFyZSBjb25zdCBVRTogYW55O1xyXG5sZXQgX2hvb2tfZmluaXNoZWQgPSBmYWxzZTtcclxuXHJcbmV4cG9ydCB0eXBlIEV2ZW50VHlwZXMgPVxyXG4gIHwgJ2Rlc3Ryb3knXHJcbiAgfCAncmVzZXQnXHJcbiAgfCAnZm9jdXMnXHJcbiAgfCAnbGFuZ1JlYWR5J1xyXG4gIHwgJ2JlZm9yZUV4ZWNDb21tYW5kJ1xyXG4gIHwgJ2FmdGVyRXhlY0NvbW1hbmQnXHJcbiAgfCAnZmlyc3RCZWZvcmVFeGVjQ29tbWFuZCdcclxuICB8ICdiZWZvcmVHZXRDb250ZW50J1xyXG4gIHwgJ2FmdGVyR2V0Q29udGVudCdcclxuICB8ICdnZXRBbGxIdG1sJ1xyXG4gIHwgJ2JlZm9yZVNldENvbnRlbnQnXHJcbiAgfCAnYWZ0ZXJTZXRDb250ZW50J1xyXG4gIHwgJ3NlbGVjdGlvbmNoYW5nZSdcclxuICB8ICdiZWZvcmVTZWxlY3Rpb25DaGFuZ2UnXHJcbiAgfCAnYWZ0ZXJTZWxlY3Rpb25DaGFuZ2UnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICd1ZWRpdG9yJyxcclxuICB0ZW1wbGF0ZTogYFxyXG4gIDx0ZXh0YXJlYSBpZD1cInt7aWR9fVwiIGNsYXNzPVwidWVkaXRvci10ZXh0YXJlYVwiPjwvdGV4dGFyZWE+XHJcbiAgPGRpdiAqbmdJZj1cImxvYWRpbmdcIiBjbGFzcz1cImxvYWRpbmdcIiBbaW5uZXJIVE1MXT1cImxvYWRpbmdUaXBcIj48L2Rpdj5cclxuICBgLFxyXG4gIHByZXNlcnZlV2hpdGVzcGFjZXM6IGZhbHNlLFxyXG4gIHN0eWxlczogW1xyXG4gICAgYFxyXG4gICAgICA6aG9zdCB7XHJcbiAgICAgICAgbGluZS1oZWlnaHQ6IGluaXRpYWw7XHJcbiAgICAgIH1cclxuICAgICAgOmhvc3QgLnVlZGl0b3ItdGV4dGFyZWEge1xyXG4gICAgICAgIGRpc3BsYXk6IG5vbmU7XHJcbiAgICAgIH1cclxuICAgIGAsXHJcbiAgXSxcclxuICBwcm92aWRlcnM6IFtcclxuICAgIHtcclxuICAgICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXHJcbiAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IFVFZGl0b3JDb21wb25lbnQpLFxyXG4gICAgICBtdWx0aTogdHJ1ZSxcclxuICAgIH0sXHJcbiAgXSxcclxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcclxufSlcclxuZXhwb3J0IGNsYXNzIFVFZGl0b3JDb21wb25lbnRcclxuICBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIENvbnRyb2xWYWx1ZUFjY2Vzc29yIHtcclxuICBwcml2YXRlIGluc3RhbmNlOiBhbnk7XHJcbiAgcHJpdmF0ZSB2YWx1ZTogc3RyaW5nO1xyXG4gIHByaXZhdGUgaW5pdGVkID0gZmFsc2U7XHJcbiAgcHJpdmF0ZSBldmVudHM6IGFueSA9IHt9O1xyXG5cclxuICBwcml2YXRlIG9uQ2hhbmdlOiAodmFsdWU6IHN0cmluZykgPT4gdm9pZDtcclxuICBwcml2YXRlIG9uVG91Y2hlZDogKCkgPT4gdm9pZDtcclxuXHJcbiAgbG9hZGluZyA9IHRydWU7XHJcbiAgaWQgPSBgX3VlZGl0b3ItJHtNYXRoLnJhbmRvbSgpXHJcbiAgICAudG9TdHJpbmcoMzYpXHJcbiAgICAuc3Vic3RyaW5nKDIpfWA7XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgY29uZmlnOiBhbnk7XHJcbiAgQElucHV0KClcclxuICBsb2FkaW5nVGlwID0gJ8OlworCoMOowr3CvcOkwrjCrS4uLic7XHJcbiAgQElucHV0KClcclxuICBzZXQgZGlzYWJsZWQodmFsdWU6IGJvb2xlYW4pIHtcclxuICAgIHRoaXMuX2Rpc2FibGVkID0gdmFsdWU7XHJcbiAgICB0aGlzLnNldERpc2FibGVkKCk7XHJcbiAgfVxyXG4gIHByaXZhdGUgX2Rpc2FibGVkID0gZmFsc2U7XHJcblxyXG4gIC8qKiDDpcK7wrbDqMK/wp/DpcKIwp3DpcKnwovDpcKMwpYgKi9cclxuICBASW5wdXQoKVxyXG4gIGRlbGF5ID0gNTA7XHJcblxyXG4gIEBPdXRwdXQoKVxyXG4gIHJlYWRvbmx5IG9uUHJlUmVhZHkgPSBuZXcgRXZlbnRFbWl0dGVyPFVFZGl0b3JDb21wb25lbnQ+KCk7XHJcbiAgQE91dHB1dCgpXHJcbiAgcmVhZG9ubHkgb25SZWFkeSA9IG5ldyBFdmVudEVtaXR0ZXI8VUVkaXRvckNvbXBvbmVudD4oKTtcclxuICBAT3V0cHV0KClcclxuICByZWFkb25seSBvbkRlc3Ryb3kgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBzczogU2NyaXB0U2VydmljZSxcclxuICAgIHByaXZhdGUgY29nOiBVRWRpdG9yQ29uZmlnLFxyXG4gICAgcHJpdmF0ZSBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYsXHJcbiAgICBwcml2YXRlIHpvbmU6IE5nWm9uZSxcclxuICApIHt9XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgdGhpcy5pbml0ZWQgPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xyXG4gICAgLy8gw6XCt8Kyw6fCu8KPw6XCrcKYw6XCnMKow6XCr8K5w6jCscKhw6bCl8Kgw6nCocK7w6jCv8Kbw6XChcKlw6bCh8KSw6XCisKgw6jCvcK9w6bCqMKhw6XCvMKPXHJcbiAgICBpZiAod2luZG93LlVFKSB7XHJcbiAgICAgIHRoaXMuaW5pdERlbGF5KCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnNzXHJcbiAgICAgIC5sb2FkKHRoaXMuY29nLmpzKVxyXG4gICAgICAuZ2V0Q2hhbmdlRW1pdHRlcigpXHJcbiAgICAgIC5zdWJzY3JpYmUocmVzID0+IHtcclxuICAgICAgICB0aGlzLmluaXREZWxheSgpO1xyXG4gICAgICB9KTtcclxuICB9XHJcblxyXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLmluaXRlZCAmJiBjaGFuZ2VzLmNvbmZpZykge1xyXG4gICAgICB0aGlzLmRlc3Ryb3koKTtcclxuICAgICAgdGhpcy5pbml0RGVsYXkoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgaW5pdERlbGF5KCkge1xyXG4gICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLmluaXQoKSwgdGhpcy5kZWxheSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGluaXQoKSB7XHJcbiAgICBpZiAoIXdpbmRvdy5VRSkgdGhyb3cgbmV3IEVycm9yKCd1ZWRpdG8ganPDpsKWwofDpMK7wrbDpcKKwqDDqMK9wr3DpcKkwrHDqMK0wqUnKTtcclxuXHJcbiAgICBpZiAodGhpcy5pbnN0YW5jZSkgcmV0dXJuO1xyXG5cclxuICAgIC8vIHJlZ2lzdHJlciBob29rXHJcbiAgICBpZiAodGhpcy5jb2cuaG9vayAmJiAhX2hvb2tfZmluaXNoZWQpIHtcclxuICAgICAgX2hvb2tfZmluaXNoZWQgPSB0cnVlO1xyXG4gICAgICB0aGlzLmNvZy5ob29rKFVFKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLm9uUHJlUmVhZHkuZW1pdCh0aGlzKTtcclxuXHJcbiAgICBjb25zdCBvcHQgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLmNvZy5vcHRpb25zLCB0aGlzLmNvbmZpZyk7XHJcblxyXG4gICAgdGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcclxuICAgICAgY29uc3QgdWVkaXRvciA9IFVFLmdldEVkaXRvcih0aGlzLmlkLCBvcHQpO1xyXG4gICAgICB1ZWRpdG9yLnJlYWR5KCgpID0+IHtcclxuICAgICAgICB0aGlzLmluc3RhbmNlID0gdWVkaXRvcjtcclxuICAgICAgICBpZiAodGhpcy52YWx1ZSkgdGhpcy5pbnN0YW5jZS5zZXRDb250ZW50KHRoaXMudmFsdWUpO1xyXG4gICAgICAgIHRoaXMub25SZWFkeS5lbWl0KHRoaXMpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHVlZGl0b3IuYWRkTGlzdGVuZXIoJ2NvbnRlbnRDaGFuZ2UnLCAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IHVlZGl0b3IuZ2V0Q29udGVudCgpO1xyXG5cclxuICAgICAgICB0aGlzLnpvbmUucnVuKCgpID0+IHRoaXMub25DaGFuZ2UodGhpcy52YWx1ZSkpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7XHJcbiAgICB0aGlzLmNkLmRldGVjdENoYW5nZXMoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZGVzdHJveSgpIHtcclxuICAgIGlmICh0aGlzLmluc3RhbmNlKSB7XHJcbiAgICAgIHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XHJcbiAgICAgICAgT2JqZWN0LmtleXModGhpcy5ldmVudHMpLmZvckVhY2gobmFtZSA9PlxyXG4gICAgICAgICAgdGhpcy5pbnN0YW5jZS5yZW1vdmVMaXN0ZW5lcihuYW1lLCB0aGlzLmV2ZW50c1tuYW1lXSksXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLmluc3RhbmNlLnJlbW92ZUxpc3RlbmVyKCdyZWFkeScpO1xyXG4gICAgICAgIHRoaXMuaW5zdGFuY2UucmVtb3ZlTGlzdGVuZXIoJ2NvbnRlbnRDaGFuZ2UnKTtcclxuICAgICAgICB0aGlzLmluc3RhbmNlLmRlc3Ryb3koKTtcclxuICAgICAgICB0aGlzLmluc3RhbmNlID0gbnVsbDtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICB0aGlzLm9uRGVzdHJveS5lbWl0KCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHNldERpc2FibGVkKCkge1xyXG4gICAgaWYgKCF0aGlzLmluc3RhbmNlKSByZXR1cm47XHJcbiAgICBpZiAodGhpcy5fZGlzYWJsZWQpIHtcclxuICAgICAgdGhpcy5pbnN0YW5jZS5zZXREaXNhYmxlZCgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5pbnN0YW5jZS5zZXRFbmFibGVkKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDDqMKOwrfDpcKPwpZVRcOlwq7CnsOkwr7Ci1xyXG4gICAqXHJcbiAgICogQHJlYWRvbmx5XHJcbiAgICovXHJcbiAgZ2V0IEluc3RhbmNlKCk6IGFueSB7XHJcbiAgICByZXR1cm4gdGhpcy5pbnN0YW5jZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIMOowq7CvsOnwr3CrsOnwrzClsOowr7CkcOlwpnCqMOowq/CrcOowqjCgFxyXG4gICAqL1xyXG4gIHNldExhbmd1YWdlKGxhbmc6ICd6aC1jbicgfCAnZW4nKSB7XHJcbiAgICB0aGlzLnNzXHJcbiAgICAgIC5sb2FkU2NyaXB0KFxyXG4gICAgICAgIGAke3RoaXMuY29nLm9wdGlvbnMuVUVESVRPUl9IT01FX1VSTH0vbGFuZy8ke2xhbmd9LyR7bGFuZ30uanNgLFxyXG4gICAgICApXHJcbiAgICAgIC50aGVuKHJlcyA9PiB7XHJcbiAgICAgICAgdGhpcy5kZXN0cm95KCk7XHJcblxyXG4gICAgICAgIC8vIMOmwrjChcOnwqnCusOowq/CrcOowqjCgFxyXG4gICAgICAgIGlmICghVUUuX2Jha19JMThOKSB7XHJcbiAgICAgICAgICBVRS5fYmFrX0kxOE4gPSBVRS5JMThOO1xyXG4gICAgICAgIH1cclxuICAgICAgICBVRS5JMThOID0ge307XHJcbiAgICAgICAgVUUuSTE4TltsYW5nXSA9IFVFLl9iYWtfSTE4TltsYW5nXTtcclxuXHJcbiAgICAgICAgdGhpcy5pbml0RGVsYXkoKTtcclxuICAgICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDDpsK3wrvDpcKKwqDDp8K8wpbDqMK+wpHDpcKZwqjDpMK6wovDpMK7wrZcclxuICAgKi9cclxuICBhZGRMaXN0ZW5lcihldmVudE5hbWU6IEV2ZW50VHlwZXMsIGZuOiBGdW5jdGlvbik6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuZXZlbnRzW2V2ZW50TmFtZV0pIHJldHVybjtcclxuICAgIHRoaXMuZXZlbnRzW2V2ZW50TmFtZV0gPSBmbjtcclxuICAgIHRoaXMuaW5zdGFuY2UuYWRkTGlzdGVuZXIoZXZlbnROYW1lLCBmbik7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDDp8KnwrvDqcKZwqTDp8K8wpbDqMK+wpHDpcKZwqjDpMK6wovDpMK7wrZcclxuICAgKi9cclxuICByZW1vdmVMaXN0ZW5lcihldmVudE5hbWU6IEV2ZW50VHlwZXMpOiB2b2lkIHtcclxuICAgIGlmICghdGhpcy5ldmVudHNbZXZlbnROYW1lXSkgcmV0dXJuO1xyXG4gICAgdGhpcy5pbnN0YW5jZS5yZW1vdmVMaXN0ZW5lcihldmVudE5hbWUsIHRoaXMuZXZlbnRzW2V2ZW50TmFtZV0pO1xyXG4gICAgZGVsZXRlIHRoaXMuZXZlbnRzW2V2ZW50TmFtZV07XHJcbiAgfVxyXG5cclxuICBuZ09uRGVzdHJveSgpIHtcclxuICAgIHRoaXMuZGVzdHJveSgpO1xyXG4gIH1cclxuXHJcbiAgLy8gcmV1c2UtdGFiOiBodHRwOi8vbmctYWxhaW4uY29tL2NvbXBvbmVudHMvcmV1c2UtdGFiIyVFNyU5NCU5RiVFNSU5MSVCRCVFNSU5MSVBOCVFNiU5QyU5RlxyXG4gIF9vblJldXNlSW5pdCgpIHtcclxuICAgIHRoaXMuZGVzdHJveSgpO1xyXG4gICAgdGhpcy5pbml0RGVsYXkoKTtcclxuICB9XHJcblxyXG4gIHdyaXRlVmFsdWUodmFsdWU6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xyXG4gICAgaWYgKHRoaXMuaW5zdGFuY2UpIHtcclxuICAgICAgdGhpcy5pbnN0YW5jZS5zZXRDb250ZW50KHRoaXMudmFsdWUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVnaXN0ZXJPbkNoYW5nZShmbjogKF86IGFueSkgPT4ge30pOiB2b2lkIHtcclxuICAgIHRoaXMub25DaGFuZ2UgPSBmbjtcclxuICB9XHJcbiAgcmVnaXN0ZXJPblRvdWNoZWQoZm46ICgpID0+IHt9KTogdm9pZCB7XHJcbiAgICB0aGlzLm9uVG91Y2hlZCA9IGZuO1xyXG4gIH1cclxuXHJcbiAgc2V0RGlzYWJsZWRTdGF0ZShpc0Rpc2FibGVkOiBib29sZWFuKTogdm9pZCB7XHJcbiAgICB0aGlzLmRpc2FibGVkID0gaXNEaXNhYmxlZDtcclxuICAgIHRoaXMuc2V0RGlzYWJsZWQoKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IFVFZGl0b3JDb21wb25lbnQgfSBmcm9tICcuL3VlZGl0b3IuY29tcG9uZW50JztcclxuaW1wb3J0IHsgVUVkaXRvckNvbmZpZyB9IGZyb20gJy4vdWVkaXRvci5jb25maWcnO1xyXG5pbXBvcnQgeyBTY3JpcHRTZXJ2aWNlIH0gZnJvbSAnLi9zY3JpcHQuc2VydmljZSc7XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGVdLFxyXG4gIHByb3ZpZGVyczogW1NjcmlwdFNlcnZpY2VdLFxyXG4gIGRlY2xhcmF0aW9uczogW1VFZGl0b3JDb21wb25lbnRdLFxyXG4gIGV4cG9ydHM6IFtVRWRpdG9yQ29tcG9uZW50XSxcclxufSlcclxuZXhwb3J0IGNsYXNzIFVFZGl0b3JNb2R1bGUge1xyXG4gIHN0YXRpYyBmb3JSb290KGNvbmZpZzogVUVkaXRvckNvbmZpZyk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbmdNb2R1bGU6IFVFZGl0b3JNb2R1bGUsXHJcbiAgICAgIHByb3ZpZGVyczogW3sgcHJvdmlkZTogVUVkaXRvckNvbmZpZywgdXNlVmFsdWU6IGNvbmZpZyB9XSxcclxuICAgIH07XHJcbiAgfVxyXG59XHJcbiIsIi8qKlxuICogR2VuZXJhdGVkIGJ1bmRsZSBpbmRleC4gRG8gbm90IGVkaXQuXG4gKi9cblxuZXhwb3J0ICogZnJvbSAnLi9pbmRleCc7XG5cbmV4cG9ydCB7U2NyaXB0U2VydmljZSBhcyDDicK1YX0gZnJvbSAnLi9zcmMvc2NyaXB0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